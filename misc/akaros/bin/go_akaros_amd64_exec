#!/bin/bash
eval $(go env)

echo "$@"

: ${AKAROS_SERVER:="qemu"}
: ${TIMEOUT:="300"}

AKAROS_GOROOT=/go
AKAROS_MNT=/mnt
HOST_MNT=$AKAROS_ROOT/mnt
AKAROS_PWD=$(pwd | sed "s;$GOROOT;$AKAROS_GOROOT;")

EXEC=$1
ARGS=${@:2}
EXEC_DIR=$(dirname $EXEC)
AKAROS_OUT=$EXEC_DIR/akaros.out

# Execute a set of commands remotely on akaros
rpc()
{
	ssh $AKAROS_SERVER "$@"
}

# Whenever the go program is done executing, remove the $EXEC on both the host
# and the client. We encapsulate this in a function here so that it will also
# happen upon pressing Ctrl-C, or otherwise exiting.
cleanup()
{
	rpc "rm -rf $EXEC 2>/dev/null"
}
die()
{
	cleanup
	echo "Program execution interrupted early"
	exit 1
}
trap die SIGINT
trap die SIGTERM
trap die SIGKILL

# Copy the go executable into $HOST_MNT/$EXEC_DIR
scp -r $EXEC $AKAROS_SERVER:$EXEC_DIR >/dev/null

# Execute the go program on akaros, printing its output, followed by its exit
# code. Pipe this to $AKAROS_OUT. Previously I was storing this output in a
# bash variable and parsing things from there. The problem, however, is that
# certaion go tests purposefully print the '\0' character to stdout, which
# bash variables silently ignore and strip from their output when echoed. This
# causes us to fail at least one go test.  Creating an actual file in the file
# system and always catting from there avoids this issue.
rpc "export GOROOT=$AKAROS_GOROOT; \
              export GOOS=akaros; \
              export GOARCH=amd64; \
              cd $AKAROS_PWD; \
              $EXEC $ARGS; \
              EXIT=\$?; \
              echo ""; \
              echo \$EXIT" > $AKAROS_OUT

# Manually do the cleanup if we reach this point
cleanup

# If there was no output from the go program, something went wrong, so error out
if [ "$(cat $AKAROS_OUT)" = "" ]; then
	echo "Could not execute binary on Akaros client. Make sure the listen1 program is running."
	echo "--------------------- Command line -------------------------------------------------"
	echo $*
	echo "--------------------- Environment --------------------------------------------------"
	printenv
	echo "------------------------------------------------------------------------------------"
	exit 1
fi

# Otherwise, extract the exit code from the output
EXIT=$(cat $AKAROS_OUT | tail -1)
# And remove the last line of the file
sed -i '$d' $AKAROS_OUT 

# If the last line in the output contains only the newline character, remove it
# (this is necessary for making sure the exit code was printed on a line by
# itself, when the actual output of the go executable doesn't end in a newline)
if [ "$(cat $AKAROS_OUT | tail -1 | wc -c)" = "1" ]; then
    sed -i '$d' $AKAROS_OUT
fi

# Print the remaining output of the go program to stdout
if [ "$(cat $AKAROS_OUT | wc -c)" != "0" ]; then
	cat $AKAROS_OUT
fi

# And exit this script with the exit code from the go program
exit $EXIT

